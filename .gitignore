import os
import csv
import spacy
import torch
from transformers import AutoTokenizer, AutoModelForQuestionAnswering, pipeline
from flask import Flask, request, jsonify

# Download and load the spaCy English language model
if not os.path.exists('en_core_web_md'):
    !python -m spacy download en_core_web_md
nlp = spacy.load("en_core_web_md")

# Load the FAQ data from the CSV file
faq_data = []
with open('FAQ.csv', newline='') as faq_file:
    reader = csv.reader(faq_file)
    for row in reader:
        faq_data.append(row)

# Load the pre-trained transformer model for question answering
tokenizer = AutoTokenizer.from_pretrained('distilbert-base-cased-distilled-squad')
model = AutoModelForQuestionAnswering.from_pretrained('distilbert-base-cased-distilled-squad')
qa_model = pipeline('question-answering', model=model, tokenizer=tokenizer)

# Define a function to process the user's input and generate a response
def generate_response(input_text):
    # Process the user's input using spaCy
    input_doc = nlp(input_text)
    
    # Loop through the FAQ data to find a matching question
    for faq in faq_data:
        faq_question = faq[0]
        faq_answer = faq[1]
        
        # Process the FAQ question using spaCy
        faq_doc = nlp(faq_question)
        
        # Check if the user's input matches the FAQ question
        if input_doc.similarity(faq_doc) > 0.8:
            return faq_answer
    
    # Use the pre-trained transformer model to answer the user's question
    qa_result = qa_model({
        "question": input_text,
        "context": " ".join(faq_data[i][0] for i in range(len(faq_data)))
    })
    if qa_result["score"] > 0.5:
        return qa_result["answer"]
    
    # If no matching question was found and the transformer model couldn't answer the question, return a default response
    return "I'm sorry, I don't understand. Please try asking a different question or send a mail to Ade@payroll.com."

# Define a Flask app and a POST route to handle user input and generate a response
app = Flask(__name__)

@app.route('/chat', methods=['POST'])
def chat():
    user_input = request.json['input']
    response = generate_response(user_input)
    return jsonify({'response': response})

if __name__ == '__main__':
    app.run()
